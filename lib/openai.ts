import OpenAI from 'openai';

// Initialize the OpenAI client
export const initOpenAI = () => {
  const apiKey = process.env.OPENAI_API_KEY;

  if (!apiKey) {
    console.error('OPENAI_API_KEY is not defined in environment variables');

    // In development, provide a fallback for testing
    if (process.env.NODE_ENV === 'development') {
      console.warn('Using mock OpenAI client in development mode');
      return new OpenAI({
        apiKey: 'mock-key',
        baseURL: 'https://api.openai.com/v1',
      });
    }

    throw new Error('OPENAI_API_KEY is not defined in environment variables');
  }

  return new OpenAI({
    apiKey,
  });
};

// Transcribe audio using Whisper API
export const transcribeAudio = async (filePath: string): Promise<string> => {
  try {
    const openai = initOpenAI();

    // Create a readable stream from the file
    const fs = require('fs');

    // Check if file exists
    if (!fs.existsSync(filePath)) {
      console.error(`File not found at path: ${filePath}`);
      throw new Error('Audio file not found');
    }

    const fileStats = fs.statSync(filePath);
    console.log(`File size: ${fileStats.size} bytes`);

    if (fileStats.size === 0) {
      console.error('File is empty');
      throw new Error('Audio file is empty');
    }

    const file = fs.createReadStream(filePath);

    // Call the Whisper API
    console.log('Calling Whisper API with file:', filePath);

    // In development mode, provide a mock response if needed
    if (process.env.NODE_ENV === 'development' && process.env.OPENAI_API_KEY === undefined) {
      console.warn('Using mock transcription in development mode');
      return "This is a mock transcription for development purposes. The actual transcription would be generated by OpenAI's Whisper API.";
    }

    const response = await openai.audio.transcriptions.create({
      file,
      model: 'whisper-1',
    });

    console.log('Transcription successful');
    return response.text;
  } catch (error) {
    console.error('Error transcribing audio with Whisper:', error);

    // Provide more detailed error message
    if (error instanceof Error) {
      if (error.message.includes('API key')) {
        throw new Error('OpenAI API key is invalid or missing. Please check your environment variables.');
      } else if (error.message.includes('file format')) {
        throw new Error('Unsupported audio file format. Please use a common audio format like MP3, WAV, or M4A.');
      } else if (error.message.includes('too large')) {
        throw new Error('Audio file is too large. Please upload a smaller file (max 25MB).');
      }
    }

    throw new Error('Failed to transcribe audio file. Please try again with a different file.');
  }
};
